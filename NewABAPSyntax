report zmay_new_abap_syntax.

"Collect statement

types: begin of ty_sample,
        company type c length 30,
        sales   type int4,
       end of ty_sample.

data: itab type table of ty_sample,
      wa type ty_Sample.

wa-company = 'IBM'.
wa-sales = 200.
COLLECT wa into itab.
wa-company = 'SAP'.
wa-sales = 200.
COLLECT wa into itab.
wa-company = 'IBM'.
wa-sales = 300.
COLLECT wa into itab.
wa-company = 'IBM'.
wa-sales = 100.
COLLECT wa into itab.
wa-company = 'SAP'.
wa-sales = 500.
COLLECT wa into itab.
wa-company = 'IBM'.
wa-sales = 50.
COLLECT wa into itab.


loop at itab into wa.
write: / wa-company, wa-sales.
endloop.




"Table Expression

*data(itab) = value ztt_oia( ( bp_id = 11000 gross_amount = 65000 )
*                            ( bp_id = 12000 gross_amount = 65000 )
*                            ( bp_id = 13000 gross_amount = 65000 ) ).
*
*read table itab into data(wa) with key bp_id = 13000.
*
*if line_exists( itab[ bp_id = 14000 ] ).
*    data(wa1) = itab[ bp_id = 14000 ].
*endif.
*
*write : / wa1-bp_id, wa1-gross_amount.


"New Class Syntax for object creation
*data: lo_obj type ref to cl_start_activate_utility.
*
*create object lo_obj.

*data(lo_obj) = new cl_start_activate_utility(  ).



"Value expression, Corresponding
*types: begin of ty_team,
*           teamname type c length 20,
*           captain  type c length 30,
*           score    type i,
*       end of ty_team,
*       tt_team type standard table of ty_team with default key,
*       begin of ty_team2,
*           scrum    type c length 20,
*           lead     type c length 30,
*           goals    type i,
*       end of ty_team2,
*       tt_team2 type standard table of ty_team2 with default key.
*
*data : itab type table of ty_team,
*       jtab type table of ty_team2.
*
*itab = value #( ( teamname = 'RCB' captain = 'Ganguly' score = 20 )
*                ( teamname = 'RR' captain = 'Watson' score = 50 )
*                ( teamname = 'KKR' captain = 'Tendulkar' score = 80 ) ).
*
**data(itab) = value tt_team( ( teamname = 'RCB' captain = 'Ganguly' score = 20 )
**                            ( teamname = 'RR' captain = 'Watson' score = 50 )
**                            ( teamname = 'KKR' captain = 'Tendulkar' score = 80 ) ).
*
*"Simple copy of data and creation of table
*"jtab = corresponding #( itab ).
*
*
*"If the target and source column names are not same, we can use a new syntax
*"jtab = corresponding #( itab mapping scrum = teamname lead = captain goals = score  ).
*
*"If we want to change some values before the values are moved to target
*jtab = value #( for line in itab ( scrum = line-teamname
*                                lead = line-captain
*                                goals = line-score * 110 / 100 ) ).
*
**data: itab type table of ty_team,
**      wa   type ty_team.
**
**wa-teamname = 'RCB'.
**wa-captain = 'Ganguly'.
**wa-score = 20.
**append wa to itab.
**wa-teamname = 'RR'.
**wa-captain = 'Watson'.
**wa-score = 50.
**append wa to itab.
**wa-teamname = 'KKR'.
**wa-captain = 'Tendulkar'.
**wa-score = 150.
**append wa to itab.
*
*loop at itab into data(wa).
*write: / wa-teamname, wa-captain, wa-score.
*endloop.
*uline.
*loop at jtab into data(wa2).
*write: / wa2-scrum, wa2-lead, wa2-goals.
*endloop.



"String Expression - Concatenation and print I Love 'India'
*data: lv_string type string,
*      lv_ctry type c length 20 value 'India'.
*
*"concatenate 'I Love ' '''' 'India' '''' into lv_string respecting blanks.
*lv_string = |I love '{ lv_ctry }'|.
*write : lv_string.



"Use of Agg functions inside SQL Case

*select buyer_guid, sum( gross_amount ) as gross_amount,
*                case
*                when sum( gross_amount ) > 2000000 then 'X'
*                else ' ' end as ord_type
*             from snwD_so
*              group by buyer_guid
*              having sum( gross_amount ) > 2000000
*              into table @data(itab).
*
*loop at itab into data(wa).
*write: / wa-buyer_guid, wa-gross_amount, wa-ord_type.
*endloop.



"Complex case
*select so_id, gross_amount,
*            case
*                when gross_amount >= 100000 then 'High'
*                when gross_amount < 1000000 and gross_amount > 25000 then 'Medium'
*                else 'Low' end as order_type
*            from snwD_so into table @data(itab).
*
*loop at itab into data(wa).
*write: / wa-so_id, wa-gross_amount, wa-order_type.
*endloop.



"Simple case with SQL
*select company_name,
*                    case bp_role
*                    when '1' then 'Customer'
*                    when '2' then 'Supplier'
*                    when '4' then 'Contractor'
*                    else 'i dont know'
*                    end as bp_role
* from snwd_bpa into table @data(itab).
*
*loop at itab into data(wa).
*write: / wa-company_name, wa-bp_role.
*endloop.


"SQL Functions in SAP for pushing logic to HANA
*Select buyer_guid, round( gross_amount, 0 ) as gross_amount,
*                   ceil( gross_amount ) as round_amount
*       from snwd_so into table @data(itab).
*
*loop at itab into data(wa).
*write: / wa-buyer_guid, wa-gross_amount, wa-round_amount.
*endloop.


"Literals in SQL Command
*select 'M/s' && ' ' && company_name as company_name from snwd_bpa
*into table @data(itab).
*
*loop at itab into data(wa).
*write: / wa-company_name.
*endloop.


"Inline data declaration - data(varname)

*select matnr, meins from mara into table @data(lt_mara).
*
*loop at lt_mara into data(ls_mara).
*write: / ls_mara-matnr, ls_mara-meins.
*endloop.
*loop at lt_mara assigning field-symbol(<fs>).
*write: / <fs>-matnr, <fs>-meins.
*endloop.
*"New loop at itab which convert every line of internal table to an object
*loop at lt_mara reference into data(lo_line).
*    write : lo_line->matnr, lo_line->meins.
*endloop.


"Comma seprated field list and escaping of host variable-SQL
*data: lt_mara type table of mara,
*      ls_mara like line of lt_mara.
*
*select matnr, meins from mara into corresponding fields of table @lt_mara.
*
*loop at lt_mara into ls_mara.
*write: / ls_mara-matnr, ls_mara-meins.
*endloop.
